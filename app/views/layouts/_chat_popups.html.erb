<div class="chat-popups-container">
  <div class="chat-popup" id="cloneMe" style="display: none">
    <div class="chat-popup-header">
      <span class="fa fa-times" onclick="closeChatPopup(this)"></span>
    </div>
    <div class="chat-messages-container">
    </div>
    <input type="text" class="chat-input-text" onkeyup="sendMessage(this, event)" placeholder="Send a message"/>
  </div>
</div>

<script type="text/javascript">
    //subscription to check if should open new chat popups on new messages
    App.cable.subscriptions.create({channel: "ChatChannel", type: "new_messages_subscription"}, {
        received: function (data) {
            createNormalChat(data.friend_id, data.friend_name);
        }
    });

    function createNormalChat(friend_id, title) {
        createChat("chatPopup", friend_id, title, "chat_subscription");
    }

    function createGroupChat(group_id, title) {
        createChat("chatPopupGroup", group_id, title, "chat_subscription_group");
    }

    function createChat(chatIdPrefix, id, title, channelType) {
        //ignore if already open
        if(document.getElementById(chatIdPrefix + id) != null)
            return;
        let original = document.getElementById("cloneMe");
        let clone = original.cloneNode(true);
        clone.id = chatIdPrefix + id;
        clone.style.display = "block";
        clone.children[0].firstChild.textContent = title;
        let gotMessageHistory = false;
        clone.chat = App.cable.subscriptions.create({
            channel: "ChatChannel", type: channelType, chatId: id}, {

            //called when connected to the server
            connected: function() {
                //calls a method on the channel on server
                this.perform("getChatMessageHistory")
            },

            //called when received data from server through broadcast
            received: function(data) {
                if(data.event === "message_history" && !gotMessageHistory) {
                    gotMessageHistory = true;
                    for(let i = 0; i < data.messages.length; i++) {
                        let message = data.messages[i];
                        appendMessageTo(clone.id, message.user, message.msg, message.time);
                    }
                }else if(data.event === "message") {
                    let message = data.message;
                    appendMessageTo(clone.id, message.user, message.msg, message.time);
                }
            }
        });
        original.parentNode.appendChild(clone);
    }

    function closeChatPopup(closeButton) {
        //close popup and stop subscription for that chat
        let chatDiv = closeButton.parentElement.parentElement;
        chatDiv.chat.unsubscribe();
        chatDiv.remove();
    }

    function sendMessage(inputTag, event) {
        if(event.key === "Enter") {
            let chatDiv = inputTag.parentElement;
            let msg = inputTag.value;
            chatDiv.chat.perform("sendChatMessage", {msg});
            inputTag.value = "";
        }
    }

    function appendMessageTo(chatPopupId, user, msg, time) {
        let messagesContainer = document.getElementById(chatPopupId).children[1];
        let msgDiv = document.createElement('div');
        if(user === "<%= current_user.full_name %>"){
            msgDiv.className = "chat-message";
        }else{
            msgDiv.className = "chat-message chat-message-darker";
        }
        msgDiv.innerHTML = `<b>${user}</b><span class="chat-time">${time}</span><p class="wrap-content">${msg}</p>`;
        messagesContainer.appendChild(msgDiv);
        let msgContainer = document.getElementById(chatPopupId).children[1];
        msgContainer.scrollTop = msgContainer.scrollHeight - msgContainer.clientHeight;
    }
</script>

